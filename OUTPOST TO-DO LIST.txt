---Search Google Fonts for a desirable font to use for this project

---Continue studying UI Material Lab example project
	---Start learning more about how to create materials, and material functions so I can make more sense of it all
	---Once I have a better understanding, migrate desired UI assets out of the project

---Create OnTakePointDamage() callback functions in the player and enemy classes (once enemy class is created)

---Search sound packs for suitable weapon sounds

---Create a health regeneration system for the player
	---When the player takes damage, RegenerateHealthHandle's timer is cleared and StartHealthRegenHandle's timer is set
	---StartHealthRegen() sets RegenerateHealthHandle's timer on a loop, according to HealthRegenRate
	---RegenerateHealth() increases the player's health, according to HealthRegenAmount

---Finish adding burst-fire functionality to OPWeapon class
	---If CurrentFireMode is EFireMode::Burst AND BurstCount is less than ShotAmount, then increment BurstCount
	---Set a timer for Shoot() to be called again, InRate will be BurstFireRate
	---Start an animation cooldown, InRate will be (WeaponFiringMontage * 3)
	---Once the burst-fire montage has ended, end the animation cooldown and reset BurstCount to 0

---Create UDamageType BP classes for each weapon, and one for melee attacks

---Create OPSaveGame class in C++

---Consider replacing EnvironmentHitEffect in OPWeapon class with something more complex, but more immersive
	---Create a "FParticleEffects" struct in OPStructs class, that holds references to various particle effects for surfaces (wood, metal, etc.)
	---If the weapon line trace doesn't hit a character, check the target's physical material (FHitResult.PhysMaterial)
	---Then do a switch statement that checks the physical material's surface type (create these in ProjectSettings/Physics/PhysicalSurface)
	---The particle effect that spawns will be dependent on that surface type (UPhysicalMaterial.SurfaceType)

---TOO MANY OTHER THINGS TO LIST RIGHT NOW...